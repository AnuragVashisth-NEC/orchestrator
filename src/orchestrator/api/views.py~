from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.decorators import api_view, throttle_classes

from orchestrator.core.flow.createNewService import createNewServiceKeystone

class NewService_RESTView(APIView):

    name = "MiKK"
    
    def post(self, request, *args, **kw):
        # Process any get params that you may need
        # If you don't need to process get params,
        # you can skip this part

        #TODO: Django dictionary/form validator

        # serializer = TaskSerializer(data=request.DATA)
        # if serializer.is_valid():
        
        KEYSTONE_PROTOCOL=request.GET.get('KEYSTONE_PROTOCOL', None)
        KEYSTONE_HOST=request.GET.get('KEYSTONE_HOST', None)
        KEYSTONE_PORT=request.GET.get('KEYSTONE_PORT', None)
        DOMAIN_NAME=request.GET.get('DOMAIN_NAME', None)
        DOMAIN_ADMIN_USER=request.GET.get('DOMAIN_ADMIN_USER', None)
        DOMAIN_ADMIN_PASSWORD=request.GET.get('DOMAIN_ADMIN_PASSWORD', None)
        NEW_SERVICE_NAME=request.GET.get('NEW_SERVICE_NAME', None)
        NEW_SERVICE_DESCRIPTION=request.GET.get('NEW_SERVICE_DESCRIPTION', None)
        NEW_SERVICE_ADMIN_USER=request.GET.get('NEW_SERVICE_ADMIN_USER', None)
        NEW_SERVICE_ADMIN_PASSWORD=request.GET.get('NEW_SERVICE_ADMIN_PASSWORD', None)
        KEYPASS_PROTOCOL=request.GET.get('KEYPASS_PROTOCOL', None)
        KEYPASS_HOST=request.GET.get('KEYPASS_HOST', None)
        KEYPASS_PORT=request.GET.get('KEYPASS_PORT', None)

        result = createNewServiceKeystone(KEYSTONE_PROTOCOL,
                                          KEYSTONE_HOST,
                                          KEYSTONE_PORT,
                                          DOMAIN_NAME,
                                          DOMAIN_ADMIN_USER,
                                          DOMAIN_ADMIN_PASSWORD,
                                          NEW_SERVICE_NAME,
                                          NEW_SERVICE_DESCRIPTION,
                                          NEW_SERVICE_ADMIN_USER,
                                          NEW_SERVICE_ADMIN_PASSWORD,
                                          KEYPASS_PROTOCOL,
                                          KEYPASS_HOST,
                                          KEYPASS_PORT)
        
        response = Response(result, status=status.HTTP_201_CREATED)
        return response


# Serializer test
        
from rest_framework import serializers
from rest_framework import viewsets

class User(object):
    def __init__(self, email):
        self.email = email

class UserSerializer(serializers.Serializer):
    email = serializers.EmailField()

    def create(self, validated_data):
        return User(**validated_data)

    def update(self, instance, validated_data):
        instance.email = validated_data.get('email', instance.email)
        return instance



# class UserViewSet(viewsets.GenericViewSet):
#     """
#     API endpoint that allows users to be viewed or edited.
#     """
#     #queryset = User.objects.all()
#     serializer_class = UserSerializer
    
#     def get_queryset(self):
#         return []

@api_view(['POST'])
def user_list(request):
    """
    List all tasks, or create a new task.
    """
    if request.method == 'POST':
        serializer = UserSerializer(data=request.DATA)

        return Response(serializer.data, status=status.HTTP_201_CREATED)
        
        # if serializer.is_valid():
        #     #serializer.save()
        #     return Response(serializer.data, status=status.HTTP_201_CREATED)
        # else:
        #     return Response(
        #         serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        
